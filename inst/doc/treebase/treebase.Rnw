\documentclass{elsarticle}

%% Redefines the elsarticle footer
\makeatletter
\def\ps@pprintTitle{%
 \let\@oddhead\@empty
 \let\@evenhead\@empty
 \def\@oddfoot{\it \hfill\today}%
 \let\@evenfoot\@oddfoot}
\makeatother

\bibliographystyle{elsarticle-harv}
\usepackage{graphicx}
\usepackage{subfigure}
\usepackage[pdftex, colorlinks]{hyperref}
\usepackage{amsmath, amsfonts}  % extended mathematics
\usepackage{booktabs} % book-quality tables

\textwidth 6.75in
\oddsidemargin -0.15in
\evensidemargin -0.15in
\textheight 9in
\topmargin -0.5in
\newcommand{\ud}{\mathrm{d}}


%% Looks like a comment but it isn't! (?) 
% \SweaveOpts{prefix.string=figure/graphics-, prefix.cache=cache/graphics-, fig=TRUE, align=center, dev=tikz, external=TRUE, width=5, height=5, fig.hold=TRUE, cache=TRUE, align=center, message=FALSE, warning=FALSE}

                   

\begin{document}
\begin{frontmatter}
  \title{An introduction to the \texttt{treebase} Package}
  \author[davis]{Carl Boettiger\corref{cor1}}
  \ead{cboettig@ucdavis.edu}
  \author[stats]{Duncan Temple Lang}
  \cortext[cor1]{Corresponding author.}
  \address[davis]{Center for Population Biology, University of California, Davis, United States}
  \address[stats]{Department of Statistics, University of California, Davis, United States}

  \begin{abstract}
  This paper describes the functionality provided by the software~\texttt{treebase}, which provides an interface between the TreeBASE repository and the R programming language.  We illustrate how the package can be used to search and retrieve phylogenetic trees from the repository, replicate existing studies that have deposited their phylogenies on TreeBASE, and perform automatically-updatable meta-analyses across the repostory.  

  \end{abstract}

  \begin{keyword}
   R  \sep vignette \sep API \sep TreeBASE
   \end{keyword}
 \end{frontmatter}

\section{Introduction}
Applications that use phylogenetic information as part of their analyses are becoming increasingly central to both evolutionary and ecological research.  The explosion of genomic data, followed by methodological advances for inferring phylogenies from this molecular information, have helped spur this increase.  The R statistical environment has become the dominant platform for researchers performing applied phylogenetic methods (27 are listed on the taskview on Phylogenetic Methods of the Comprehensive R Archive Network) and new methods are added every year.  

TreeBASE is an online repository of phylogenies~\citep{Sanderson1994b}.  With the advent of mandatory data archiving in many of the major journals publishing phylognetics-based research over the past year~\citep{Fairbairn2010, Piwowar2011, Whitlock2010}, such resources can expect to become increasingly prominent.  TreeBASE provides an application programming interface, or API, that lets applications make queries to the database.  We have implemented an R package that plugs into this interface to provide direct access to this data.  

\section{Examples \& Results}

<<libs, echo=FALSE>>=
require(ggplot2)
require(treebase)
@


The basic functions of the TreeBASE API allow search queries of the phylogenetic data in the repository (using the phylo-ws interface) and the metadata of publications associated with the phylogenies (using the OAI-MPH interface).  These interfaces are well-documented on the TreeBASE website.  The \texttt{treebase} package allows these queries to be made directly from R, just as a user would make them from the browser.  The real advantage of the capacity to automate these tasks in R is shown in the later examples on replicating results and performing meta-analyses, but first, we introduce the package with some simple examples.  


\subsection{Basic Queries}
Any of the basic queries avaiable on the web interface can now be made directly from R, including downloading and importing the phylogeny into the R interface.  For instance, the following command searches for phylogenies containing dolphins:
<<basicQueries>>=
search_treebase('"Delphinus"', by="taxon", max_trees=2)
@
which loads the matching phylogenies into R, ready for analysis.  In this case we have restricted the number of matches to 2.  The package and online documentation provide many examples of other possible queries.  

\subsection{Meta-data queries}
The package also provides access to the metadata of all publications containing trees deposited in TreeBASE. This can help the user discover phylogenies of interest and also allows the user to perform statistical analyses on the data deposition itself.  While the metadata can be searched within a given date range, it is most straight-forward to import the full meta-data records first, with the command 

<<getmetadata, eval=FALSE>>=
all <- search_metadata("", by="all") 
@

For convience, it is possible to load the copy of this data cached at the time the package was compiled.  
<<cache>>=
data(metadata)
@

We can then look at the distribution of publication years for phylogenies depositied in TreeBASE and see if there is any trend, Fig~\ref{fig:1}.

\begin{figure}
\begin{center}
<<dates>>=
dates <- sapply(all, function(x) as.numeric(x$date))
hist(dates, main="TreeBase growth", xlab="Year")
@
\caption{Histogram of publication dates by year, with the code required to generate the figure.}\label{fig:1}
\end{center}
\end{figure}

We can also look for patterns among publishers, such as comparing the number of submissions of two different publishers:
<<journals>>=
nature <- sapply(all, function(x) length(grep("Nature", x$publisher))>0)
science <- sapply(all, function(x) length(grep("^Science$", x$publisher))>0)
# number of entries in each
sum(nature)
sum(science)
@

Many more such exercises are possible, and several examples are included in the demo files provided with the package.  


\subsection{Reproducible research \& education}
Reproducible research has become a topic of increasing concern in recent years~\citep{Shwab2000, Keiding2010a, Peng2011b}.  Access to data and executable scripts that reproduce the results presented are two central elements of this process which are addressed by the \texttt{treebase} package.   

<<derryberry, width=1, height=5>>=
tree <- search_treebase("Derryberry", "author")[[1]] 
metadata(tree$S.id)
plot(tree)
@

For instance, we can replicate the model choice methods they perform to select the most likely branching model candidate.  
<<RR, tidy=TRUE>>=
require(laser)
tt <- branching.times(tree)
# yule model with single shift pt
# linear, diversity-dependent
#exponential diversity-dendent
# vary speciation in time
# vary extinction in time
# vary both
models <-  list(pb = pureBirth(tt), bdfit = bd(tt), y2r = yule2rate(tt), ddl = DDL(tt), ddx = DDX(tt), sv = fitSPVAR(tt), ev = fitEXVAR(tt), bv = fitBOTHVAR(tt) ) 
aics <- sapply(models, function(x) x$aic)
# show the winning model
models[which.min(aics)]
@ 

In this fast-moving field, new methods often become available within the timeframe that another manuscript is submitted by its authors and the time at which if first appears in print.  For instance, the more sophisticated methods avaialable in the more recent package, TreePar, were not used in this study. We can easily re-analyze these results 


\subsection{The self-updating meta-analysis}
Meta-analyses are becoming increasingly common in phylogenetic methods~\citep[\emph{e.g}][]{McPeek2007, Phillimore2008, McPeek2008,Quental2010, Davies2011a}.  Accessing many phylogenies can be difficult, and researchers have gone through heroic efforts to extract phylogenetic information from the literature, such as~\citet{McPeek2007}, who report that ``All branch lengths were measured by hand from these printed sheets using dial calipers'' on 163 phylogenies printed out from pdfs in which they appeared in the literature.  Researchers may focus their meta-analysis on particular taxa~\citep{Phillimore2008}, leaving us to wonder if the conclusions hold in other groups.  Other studies may use a single empirical tree accompanied by a a collection of simulated phylogenies~\citet{Cusimano2010}.  Some already turn to TreeBASE to provide a more extensive collection of phylogenies~\citep{Davies2011a}.  The analysis in many of these studies already uses or can use methods available in R.  

By building such meta-analyses around the treebase package, one can not only take advantage of the existing data with far less effort, but also provide a script that can be automatically updated as more phylogenies are deposited in the TreeBASE repository.  

<<meta_harvest, eval=FALSE>>=
all_trees <- search_treebase("Consensus", "type.tree", branch_lengths=TRUE)
@

For convience and testing purposes, we could just load the cached set of all phylogenetic trees with branchlengths in TreeBASE at the time the package was built:
<<meta_cache>>=
data(branchlengths)
@


Many meta-analyses require ultrametric trees (branch lengths proportional to time, rather than to mutational steps).  This function is just an elementary example to illustrate the process of time-calibrating a tree; more sophisticated methods could be chosen instead.  
<<timetree>>=
timetree <- function(tree){
    check.na <- try(sum(is.na(tree$edge.length))>0)
    if(is(check.na, "try-error") | check.na)
      NULL
    else
    try( chronoMPL(multi2di(tree)) )
}
tt <- drop_errors(sapply(branchlengths, timetree))
@


The central question of many of meta-analyses mentioned above has been whether or not phylogenies show a changing rates of evolution.  A standard test of this is the $\gamma$ statistic of~\citet{Pybus2000} which tests the null hypothesis that the rates of speciation and extinction are constant.  Applying this test to all of the currently available trees in TreeBASE,
<<gamma>>=
# gamma statistic
gammas <- sapply(tt, function(phy)  gammaStat(phy))
# associated p-value
p_gammas <- sapply(gammas, function(x)  2*(1-pnorm(abs(x))))
non_const <- sum(p_gammas < 0.025)/length(gammas)
@
we find that \Sexpr{round(non_const, 2)*100}\% of the trees can reject the constant-rates model at the 95\% confidence level.   

We can define a simple function to tell us if pure birth or birth-death model fits the data better using AIC scores.  This function is primarily illustrative, and the user could readily extend this with more elaborate tests.  
<<pick_branching_model>>=
require(laser)
pick_branching_model <- function(tree){
  m1 <- try(pureBirth(branching.times(tree)))
  m2 <- try(bd(branching.times(tree)))
  as.logical(try(m2$aic < m1$aic))
}
@

<<yule>>=
is_yule <- sapply(tt, pick_branching_model)
table(is_yule)
@

\section{Discussion}


 \section{Acknowledgements}
 CB is supported by a Computational Sciences Graduate Fellowship from the Department of Energy under grant number DE-FG02-97ER25308. 
 \section*{ }%bibliography
 \bibliography{/home/cboettig/Documents/Mendeley/bib/library}


\end{document}


