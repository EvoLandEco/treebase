\documentclass{elsarticle}

%% Redefines the elsarticle footer
\makeatletter
\def\ps@pprintTitle{%
 \let\@oddhead\@empty
 \let\@evenhead\@empty
 \def\@oddfoot{\it \hfill\today}%
 \let\@evenfoot\@oddfoot}
\makeatother

\bibliographystyle{elsarticle-harv}
\usepackage{graphicx}
\usepackage{subfigure}
\usepackage[pdftex, colorlinks]{hyperref}
\usepackage{amsmath, amsfonts}  % extended mathematics
\usepackage{booktabs} % book-quality tables

\textwidth 6.75in
\oddsidemargin -0.15in
\evensidemargin -0.15in
\textheight 9in
\topmargin -0.5in
\newcommand{\ud}{\mathrm{d}}


%% Looks like a comment but it isn't! (?) 
% \SweaveOpts{prefix.string=figure/graphics-, prefix.cache=cache/graphics-, fig=TRUE, align=center, dev=tikz, external=TRUE, width=5, height=5, fig.hold=TRUE, cache=TRUE, align=center}

                   

\begin{document}
\begin{frontmatter}
  \title{An introduction to the \texttt{package-name} Package}
  \author[davis]{Carl Boettiger\corref{cor1}}
  \ead{cboettig@ucdavis.edu}
  %\author[davis]{}
  \cortext[cor1]{Corresponding author.}
  \address[davis]{Center for Population Biology, University of California, Davis, United States}

  \begin{abstract}
  This paper describes the functionality provided by the software~\texttt{treebase}, which provides an interface between the TreeBase API and the R programming language.  

  \end{abstract}

  \begin{keyword}
   R  \sep vignette \sep API \sep TreeBase
   \end{keyword}
 \end{frontmatter}

\section{Introduction}
Treebase~\citep{Sanderson1994b}. Applications that use phylogenetic information as part of their analyses are becoming increasingly central to both evolutionary and ecological research.  The explosion of genomic data, followed by methodological advances for inferring phylogenies from this molecular information, have helped spur this increase.  The R statistical environment has become the dominant platform for researchers performing applied phylogenetic methods (27 are listed on the taskview on Phylogenetic Methods of the Comprehensive R Archive Network) and new methods are added every year.  


\section{Examples}

<<libs, echo=TRUE, message=FALSE>>=
require(ggplot2)
require(RCurl) #maybe just require "methods" in the makefile?
require(XML)
require(treebase)
@

\subsection{Basic Queries}
<<basicQueries, echo=TRUE, message=FALSE>>=
search_treebase('"Delphinus"', by="taxon", max_trees=2)
@


\subsection{Meta-data queries}
Identifying the appropriate study

<<all>>=
#all <- search_metadata("", by="all") 
data(metadata)
dates <- sapply(all, function(x) as.numeric(x$date))
hist(dates, main="TreeBase growth", xlab="Year")
@

<<journals>>=
nature <- sapply(all, function(x) length(grep("Nature", x$publisher))>0)
science <- sapply(all, function(x) length(grep("^Science$", x$publisher))>0)
@


\section{Reproducible research \& education}
<<derryberry, fig=TRUE, width=1, height=5, cache=TRUE>>=
tree <- search_treebase("Derryberry", "author")[[1]] 
metadata(tree$S.id)
plot(tree)
@

For instance, we can replicate the model choice methods they perform to select the most likely branching model candidate.  
<<RR, tidy=TRUE, warning=FALSE, message=FALSE, cache=TRUE>>=
require(laser)
tt <- branching.times(tree)
# yule model with single shift pt
# linear, diversity-dependent
#exponential diversity-dendent
# vary speciation in time
# vary extinction in time
# vary both
models <-  list(pb = pureBirth(tt), bdfit = bd(tt), y2r = yule2rate(tt), ddl = DDL(tt), ddx = DDX(tt), sv = fitSPVAR(tt), ev = fitEXVAR(tt), bv = fitBOTHVAR(tt) ) 
aics <- sapply(models, function(x) x$aic)
# show the winning model
models[which.min(aics)]
@ 

In this fast-moving field, new methods often become available within the timeframe that another manuscript is submitted by its authors and the time at which if first appears in print.  For instance, the more sophisticated methods avaialable in the more recent package, TreePar, were not used in this study. We can easily re-analyze these results 


\section{The self-updating meta-analysis}
<<customFunctions, echo=FALSE>>=
timetree <- function(tree){
    check.na <- try(sum(is.na(tree$edge.length))>0)
    if(is(check.na, "try-error") | check.na)
      NULL
    else
    try( chronoMPL(multi2di(tree)) )
}
drop_errors <- function(tr){
  tt <- tr[!sapply(tr, is.null)]
  tt <- tt[!sapply(tt, function(x) is(x, "try-error"))]
  print(paste("dropped", length(tr)-length(tt), "trees"))
  tt
}
require(laser)
pick_branching_model <- function(tree){
  m1 <- try(pureBirth(branching.times(tree)))
  m2 <- try(bd(branching.times(tree)))
  as.logical(try(m2$aic < m1$aic))
}
@

<<metaanalysis, eval=FALSE>>=
#all_trees <- search_treebase("Consensus", "type.tree", branch_lengths=TRUE)
data(branchlengths)
tt <- drop_errors(sapply(all_trees, timetree))
is_yule <- sapply(tt, pick_branching_model)
table(is_yule)
@


 \section{Acknowledgements}
 CB is supported by a Computational Sciences Graduate Fellowship from the Department of Energy under grant number DE-FG02-97ER25308. 
 \section*{ }%bibliography
 \bibliography{/home/cboettig/Documents/Mendeley/bib/library.bib}


\end{document}


